# -*- coding: utf-8 -*-
"""Z5_6_svm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13f4NRUIqVP2Q53kzK2ijYaVBLrRlJ-rV
"""

pip install umap-learn

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler
from sklearn.manifold import TSNE


import matplotlib.pyplot as plt
from matplotlib import cm
import matplotlib as mpl

import umap
import plotly.express as px
from sklearn import svm
from sklearn.model_selection import train_test_split







spam = pd.read_csv("http://archive.ics.uci.edu/ml/machine-learning-databases/spambase/spambase.data")

X = spam.iloc[:,0: 57].values
y =  spam.iloc[: , -1]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

#Create a svm Classifier
clf_linear = svm.SVC(kernel='linear') # Linear Kernel

#Train the model using the training sets
clf_linear.fit(X_train, y_train)

#Predict the response for test dataset
y_pred_linear = clf_linear.predict(X_test)









from sklearn import metrics

print("linear Accuracy:",metrics.accuracy_score(y_test, y_pred_linear))

print("linear Recall:",metrics.recall_score(y_test, y_pred_linear))

print("linear Precision:",metrics.precision_score(y_test, y_pred_linear))

from sklearn.metrics import f1_score

f1_score(y_test, y_pred_linear, average='macro')



model = svm.SVC(kernel='rbf', probability=True, gamma='scale')
clf = model.fit(X_train, y_train)

y_pred_rbf = clf.predict(X_test)



print("rbf Accuracy:",metrics.accuracy_score(y_test, y_pred_rbf))

print("rbf Recall:",metrics.recall_score(y_test, y_pred_rbf))

print("rbf Precision:",metrics.precision_score(y_test, y_pred_rbf))

f1_score(y_test, y_pred_rbf, average='macro')

model_poly = svm.SVC(kernel='poly', degree=8)
clf_poly = model_poly.fit(X_train, y_train)
y_pred_poly = clf_poly.predict(X_test)
print("poly Accuracy:",metrics.accuracy_score(y_test, y_pred_poly))
print("poly Recall:",metrics.recall_score(y_test, y_pred_poly))
print("poly Precision:",metrics.precision_score(y_test, y_pred_poly))
f1_score(y_test, y_pred_poly, average='macro')

model_sig = svm.SVC(kernel='sigmoid')
clf_sig = model_sig.fit(X_train, y_train)
y_pred_sig = clf_sig.predict(X_test)
print("sig Accuracy:",metrics.accuracy_score(y_test, y_pred_sig))
print("sig Recall:",metrics.recall_score(y_test, y_pred_sig))
print("sig Precision:",metrics.precision_score(y_test, y_pred_sig))
f1_score(y_test, y_pred_sig, average='macro')



X = spam.iloc[:,: 57]

tsne = TSNE(n_components=2, random_state=0)
projections = tsne.fit_transform(X_test)

fig = px.scatter(
    projections, x=0, y=1,
    color=y_pred_linear, labels={'color': 'spam'}
)
fig.show()

X = spam.iloc[:,: 57]

tsne = TSNE(n_components=2, random_state=0)
projections = tsne.fit_transform(X_test)

fig = px.scatter(
    projections, x=0, y=1,
    color=y_test, labels={'color': 'spam'}
)
fig.show()



